import { chromium, Browser, Page, BrowserContext } from 'playwright';
import { ExecuteMethod, LoadScript } from '../scripts/ScriptLoader';
import fs from 'fs';

let page: Page;
let browser: Browser | null = null;
let context: BrowserContext | null = null;


export const LaunchBrowser = async (browserType = 'chromium') => {
  browser = await chromium.launch({ headless: false, devtools: true });
  context = await browser.newContext({ bypassCSP: true });
  page = await context.newPage();
  page.on('framenavigated', AddEventHandlers);

  console.log('new browser created')
};

export const GoTo = async (url: string) => {
  console.log('URL:', url);
  if (!page || page.isClosed())
    await LaunchBrowser();

  await page.goto(url);
};

export const PrintAllSelectors = async () => {

  const selectors = await page.evaluate(() => {
    const elements = document.querySelectorAll('*');
    const uniqueSelectors: any[] | Promise<any[]> = [];

    elements.forEach(element => {
      const tagName = element.tagName.toLowerCase();
      let selector = '';

      // Use id if it exists and is non-generated
      const id = element.id;
      if (id && !id.match(/^\d+$/)) {
        selector = `#${id}`;
      }

      // Use name attribute if it exists
      const name = element.getAttribute('name');
      if (!selector && name) {
        selector = `${tagName}[name="${name}"]`;
      }

      // Use aria-label if it exists
      const ariaLabel = element.getAttribute('aria-label');
      if (!selector && ariaLabel) {
        selector = `${tagName}[aria-label="${ariaLabel}"]`;
      }

      // Use title if it exists
      const title = element.getAttribute('title');
      if (!selector && title) {
        selector = `${tagName}[title="${title}"]`;
      }

      // Use class if it exists and isn't generated by styled components
      const classList = Array.from(element.classList).filter(className => !className.includes('__') && !className.match(/^\d+$/));
      if (!selector && classList.length) {
        selector = `${tagName}.${classList.join('.')}`;
      }

      // Verify selector uniqueness
      if (selector && document.querySelectorAll(selector).length === 1) {
        uniqueSelectors.push(selector);
      }
    });

    return uniqueSelectors;
  });

  console.log(selectors);
}


export const AddEventHandlers = async () => {
  try {
    console.log('AddEventHandlers called');

    // Read the script content
    const scriptContent = fs.readFileSync('C:/Users/Abbas/source/repos/electron-test/electron/pw/script-inject.js', 'utf-8');
    //console.log('Script content loaded:', scriptContent);

    // Inject the script into the page
    await page.evaluate((content) => {
      const script = document.createElement('script');
      script.innerHTML = content;
      document.head.appendChild(script);
    }, scriptContent);

    console.log('Script injected successfully');
  } catch (error) {
    console.error('Failed to add event handlers:', error);
  }
};

export const Fill = async (locator: string, value: string) => {
  await page.locator(locator).fill(value);
}

export const Click = async (locator: string) => {
  await page.locator(locator).click();
}

export const Test = async () => {
  await LaunchBrowser();
  console.log(await LoadScript());
  await ExecuteMethod('GOTO', page, 'https://mui.com/');
  await ExecuteMethod('GOTO', page, 'https://chatgpt.com/')
}

