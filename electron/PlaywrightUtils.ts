import { chromium, Browser, Page, BrowserContext } from 'playwright';
import WebSocket from 'ws'
let page: Page;
let browser: Browser | null = null;
let context: BrowserContext | null = null;



export const LaunchBrowser = async (browserType = 'chromium') => {
  browser = await chromium.launch({ headless: false });
  context = await browser.newContext();
  page = await context.newPage();
  console.log('new browser created')
};

export const GoTo = async (url: string) => {
  console.log('URL:', url);
  if (!page || page.isClosed())
    await LaunchBrowser();
  await page.goto(url);

  AddEventHandlers();
};

export const PrintAllSelectors = async () => {

  const selectors = await page.evaluate(() => {
    const elements = document.querySelectorAll('*');
    const uniqueSelectors: any[] | Promise<any[]> = [];

    elements.forEach(element => {
      const tagName = element.tagName.toLowerCase();
      let selector = '';

      // Use id if it exists and is non-generated
      const id = element.id;
      if (id && !id.match(/^\d+$/)) {
        selector = `#${id}`;
      }

      // Use name attribute if it exists
      const name = element.getAttribute('name');
      if (!selector && name) {
        selector = `${tagName}[name="${name}"]`;
      }

      // Use aria-label if it exists
      const ariaLabel = element.getAttribute('aria-label');
      if (!selector && ariaLabel) {
        selector = `${tagName}[aria-label="${ariaLabel}"]`;
      }

      // Use title if it exists
      const title = element.getAttribute('title');
      if (!selector && title) {
        selector = `${tagName}[title="${title}"]`;
      }

      // Use class if it exists and isn't generated by styled components
      const classList = Array.from(element.classList).filter(className => !className.includes('__') && !className.match(/^\d+$/));
      if (!selector && classList.length) {
        selector = `${tagName}.${classList.join('.')}`;
      }

      // Verify selector uniqueness
      if (selector && document.querySelectorAll(selector).length === 1) {
        uniqueSelectors.push(selector);
      }
    });

    return uniqueSelectors;
  });

  console.log(selectors);
}

export const AddEventHandlers = async () => {
  await page.evaluate(() => {
    // Define the CSS for the highlight class
    const style = document.createElement('style');
    style.innerHTML = `
      .highlight-hover {
        position: relative;
        z-index: 1;
      }
      .highlight-hover:before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid yellow;
        z-index: -1;
        pointer-events: none;
      }
    `;
    document.head.appendChild(style);

    // Select all elements on the page
    const elements = document.querySelectorAll('*');

    elements.forEach(element => {
      // Add a mouseover event listener to each element
      element.addEventListener('mouseover', (event) => {
        // Stop event from propagating to parent elements
        event.stopPropagation();
        // Add the highlight class
        element.classList.add('highlight-hover');
      });

      // Remove the highlight class when the mouse leaves the element
      element.addEventListener('mouseout', (event) => {
        // Stop event from propagating to parent elements
        event.stopPropagation();

        // Remove the highlight class
        element.classList.remove('highlight-hover');
      });

      element.addEventListener('click', (event) => {
        console.log('clicked');
        event.stopPropagation();
        const clickedElement: any = event.target
        const elementData = {
          selector: 'element selector'
        }

        // Send the clicked element data via WebSocket
        window.fetch('http://localhost:12215/element-clicked', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(elementData)
        }).then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        }).then(data => {
          console.log('Success:', data);
        }).catch((error) => {
          console.error('Error:', error);
        });
      })
    });
  });


  // await page.evaluate(() => {
  //   const elements = document.querySelectorAll('*');

  //   elements.forEach(element => {
      
  //   })
  // })
};

export const Fill = async (locator: string, value: string) => {
  await page.locator(locator).fill(value);
}

export const Click = async (locator: string) => {
  await page.locator(locator).click();
}